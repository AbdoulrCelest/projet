import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import base64

class UIRenderer:
    def __init__(self):
        """
        Initialise le moteur de rendu d'interface Streamlit.
        """
        pass  # Aucun √©tat √† maintenir pour l'instant

    def render_sidebar(self, zones, horizons):
        """
        Affiche la barre lat√©rale de configuration.

        :return: tuple (zone, horizon) s√©lectionn√©s
        """
        st.sidebar.title("Configuration")
        zone = st.sidebar.selectbox("Zone", zones)
        horizon = st.sidebar.selectbox("Horizon", horizons)
        return zone, horizon

    def render_date_selector(self, df):
        """
        Affiche les champs de s√©lection de plage de dates dans la sidebar.

        :param df: DataFrame dont l'index est de type DatetimeIndex
        :return: start_date, end_date s√©lectionn√©s
        """
        st.sidebar.subheader("Filtrage temporel")
        min_date = df.index.min()
        max_date = df.index.max()

        start_date = st.sidebar.date_input("Date de d√©but", value=min_date, min_value=min_date, max_value=max_date)
        end_date = st.sidebar.date_input("Date de fin", value=max_date, min_value=start_date, max_value=max_date)

        return start_date, end_date

    def render_title(self, zone, horizon):
        """
        Affiche le titre principal de la page.
        """
        st.title(f"Pr√©visions de la demande ‚Äî {zone.capitalize()} ({horizon})")

    def render_summary_statistics(self, df):
        """
        Affiche les statistiques descriptives de la demande r√©elle.
        """
        st.subheader("Statistiques de la demande r√©elle")
        st.write(df["demand"].describe())

    def render_model_info(self, model, name='Meilleur mod√®le'):
        """
        Affiche le type de mod√®le s√©lectionn√©.
        """
        st.subheader("Mod√®le s√©lectionn√©")
        st.write(f"Type de mod√®le : `{type(model).__name__}`, name: `{name}`")

    def render_predictions_chart(self, y_true, y_pred, index):
        """
        Affiche un graphique interactif comparant y_true et y_pred.
        """
        st.subheader("Comparaison R√©el vs Pr√©diction")
        fig = go.Figure()
        fig.add_trace(go.Scatter(y=y_true, x=index, name="R√©el", line=dict(color="royalblue")))
        fig.add_trace(go.Scatter(y=y_pred, x=index, name="Pr√©diction", line=dict(color="orange")))
        fig.update_layout(height=400, xaxis_title="Temps", yaxis_title="Demande")
        st.plotly_chart(fig, use_container_width=True)

    def render_performance_kpis(self, kpi_dict):
        """
        Affiche les indicateurs MAE, RMSE, MAPE.
        """
        st.subheader("Indicateurs de performance")
        col1, col2, col3 = st.columns(3)
        col1.metric("MAE",  f"{kpi_dict['MAE']:.2f}")
        col2.metric("RMSE", f"{kpi_dict['RMSE']:.2f}")
        col3.metric("MAPE", f"{kpi_dict['MAPE']:.2f}%")

    def render_download_button(self, y_true, y_pred, index):
        """
        Affiche un lien pour t√©l√©charger les pr√©dictions au format CSV.
        """
        df_out = pd.DataFrame({
            "Date": index,
            "R√©el": y_true,
            "Pr√©diction": y_pred
        })

        csv = df_out.to_csv(index=False).encode('utf-8')
        b64 = base64.b64encode(csv).decode()

        st.markdown(
            f'<a href="data:file/csv;base64,{b64}" download="predictions.csv">üì• T√©l√©charger les pr√©dictions (CSV)</a>',
            unsafe_allow_html=True
        )

    def render_model_explanation(self, zone, horizon):
        """
        Affiche une explication textuelle simple du mod√®le.
        """
        st.subheader("Explication du mod√®le")
        st.info(f"""
        Ce mod√®le pr√©dit la demande √©nerg√©tique en Espagne, pour la zone **{zone}** avec une granularit√© **{horizon}**.
        Il a √©t√© s√©lectionn√© comme le meilleur mod√®le bas√© sur les m√©triques d'√©valuation historiques.

        Des explications plus d√©taill√©es (SHAP, attention, importance des features) peuvent √™tre ajout√©es ici.
        Comme constat√©, nos mod√®les sont mauvais pour les predictions journali√®res. Nous y travaillons
        pour rendre ces mod√®les performants.
        """)
